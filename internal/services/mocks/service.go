// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/Util787/junTask/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(params entities.User) (entities.User, error) {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(entities.User) (entities.User, error)); ok {
		return returnFunc(params)
	}
	if returnFunc, ok := ret.Get(0).(func(entities.User) entities.User); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Get(0).(entities.User)
	}
	if returnFunc, ok := ret.Get(1).(func(entities.User) error); ok {
		r1 = returnFunc(params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - params entities.User
func (_e *MockUserService_Expecter) CreateUser(params interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", params)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(params entities.User)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 entities.User
		if args[0] != nil {
			arg0 = args[0].(entities.User)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(user entities.User, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(params entities.User) (entities.User, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function for the type MockUserService
func (_mock *MockUserService) DeleteUser(id int32) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int32) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserService_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int32
func (_e *MockUserService_Expecter) DeleteUser(id interface{}) *MockUserService_DeleteUser_Call {
	return &MockUserService_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUserService_DeleteUser_Call) Run(run func(id int32)) *MockUserService_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int32
		if args[0] != nil {
			arg0 = args[0].(int32)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_DeleteUser_Call) Return(err error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_DeleteUser_Call) RunAndReturn(run func(id int32) error) *MockUserService_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// ExistByFullName provides a mock function for the type MockUserService
func (_mock *MockUserService) ExistByFullName(params entities.FullName) (bool, error) {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for ExistByFullName")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(entities.FullName) (bool, error)); ok {
		return returnFunc(params)
	}
	if returnFunc, ok := ret.Get(0).(func(entities.FullName) bool); ok {
		r0 = returnFunc(params)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(entities.FullName) error); ok {
		r1 = returnFunc(params)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_ExistByFullName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistByFullName'
type MockUserService_ExistByFullName_Call struct {
	*mock.Call
}

// ExistByFullName is a helper method to define mock.On call
//   - params entities.FullName
func (_e *MockUserService_Expecter) ExistByFullName(params interface{}) *MockUserService_ExistByFullName_Call {
	return &MockUserService_ExistByFullName_Call{Call: _e.mock.On("ExistByFullName", params)}
}

func (_c *MockUserService_ExistByFullName_Call) Run(run func(params entities.FullName)) *MockUserService_ExistByFullName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 entities.FullName
		if args[0] != nil {
			arg0 = args[0].(entities.FullName)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_ExistByFullName_Call) Return(b bool, err error) *MockUserService_ExistByFullName_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserService_ExistByFullName_Call) RunAndReturn(run func(params entities.FullName) (bool, error)) *MockUserService_ExistByFullName_Call {
	_c.Call.Return(run)
	return _c
}

// ExistById provides a mock function for the type MockUserService
func (_mock *MockUserService) ExistById(id int32) (bool, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for ExistById")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int32) (bool, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int32) bool); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(int32) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_ExistById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExistById'
type MockUserService_ExistById_Call struct {
	*mock.Call
}

// ExistById is a helper method to define mock.On call
//   - id int32
func (_e *MockUserService_Expecter) ExistById(id interface{}) *MockUserService_ExistById_Call {
	return &MockUserService_ExistById_Call{Call: _e.mock.On("ExistById", id)}
}

func (_c *MockUserService_ExistById_Call) Run(run func(id int32)) *MockUserService_ExistById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int32
		if args[0] != nil {
			arg0 = args[0].(int32)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_ExistById_Call) Return(b bool, err error) *MockUserService_ExistById_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockUserService_ExistById_Call) RunAndReturn(run func(id int32) (bool, error)) *MockUserService_ExistById_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllUsers provides a mock function for the type MockUserService
func (_mock *MockUserService) GetAllUsers(limit int, offset int, name string, surname string, patronymic string, gender string) ([]entities.User, error) {
	ret := _mock.Called(limit, offset, name, surname, patronymic, gender)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUsers")
	}

	var r0 []entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int, int, string, string, string, string) ([]entities.User, error)); ok {
		return returnFunc(limit, offset, name, surname, patronymic, gender)
	}
	if returnFunc, ok := ret.Get(0).(func(int, int, string, string, string, string) []entities.User); ok {
		r0 = returnFunc(limit, offset, name, surname, patronymic, gender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(int, int, string, string, string, string) error); ok {
		r1 = returnFunc(limit, offset, name, surname, patronymic, gender)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetAllUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllUsers'
type MockUserService_GetAllUsers_Call struct {
	*mock.Call
}

// GetAllUsers is a helper method to define mock.On call
//   - limit int
//   - offset int
//   - name string
//   - surname string
//   - patronymic string
//   - gender string
func (_e *MockUserService_Expecter) GetAllUsers(limit interface{}, offset interface{}, name interface{}, surname interface{}, patronymic interface{}, gender interface{}) *MockUserService_GetAllUsers_Call {
	return &MockUserService_GetAllUsers_Call{Call: _e.mock.On("GetAllUsers", limit, offset, name, surname, patronymic, gender)}
}

func (_c *MockUserService_GetAllUsers_Call) Run(run func(limit int, offset int, name string, surname string, patronymic string, gender string)) *MockUserService_GetAllUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int
		if args[0] != nil {
			arg0 = args[0].(int)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 string
		if args[4] != nil {
			arg4 = args[4].(string)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) Return(users []entities.User, err error) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(users, err)
	return _c
}

func (_c *MockUserService_GetAllUsers_Call) RunAndReturn(run func(limit int, offset int, name string, surname string, patronymic string, gender string) ([]entities.User, error)) *MockUserService_GetAllUsers_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserById(id int32) (entities.User, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 entities.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(int32) (entities.User, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(int32) entities.User); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Get(0).(entities.User)
	}
	if returnFunc, ok := ret.Get(1).(func(int32) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserService_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - id int32
func (_e *MockUserService_Expecter) GetUserById(id interface{}) *MockUserService_GetUserById_Call {
	return &MockUserService_GetUserById_Call{Call: _e.mock.On("GetUserById", id)}
}

func (_c *MockUserService_GetUserById_Call) Run(run func(id int32)) *MockUserService_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int32
		if args[0] != nil {
			arg0 = args[0].(int32)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockUserService_GetUserById_Call) Return(user entities.User, err error) *MockUserService_GetUserById_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserById_Call) RunAndReturn(run func(id int32) (entities.User, error)) *MockUserService_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) UpdateUser(id int32, params entities.UpdateUserParams) error {
	ret := _mock.Called(id, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int32, entities.UpdateUserParams) error); ok {
		r0 = returnFunc(id, params)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockUserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - id int32
//   - params entities.UpdateUserParams
func (_e *MockUserService_Expecter) UpdateUser(id interface{}, params interface{}) *MockUserService_UpdateUser_Call {
	return &MockUserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", id, params)}
}

func (_c *MockUserService_UpdateUser_Call) Run(run func(id int32, params entities.UpdateUserParams)) *MockUserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 int32
		if args[0] != nil {
			arg0 = args[0].(int32)
		}
		var arg1 entities.UpdateUserParams
		if args[1] != nil {
			arg1 = args[1].(entities.UpdateUserParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockUserService_UpdateUser_Call) Return(err error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockUserService_UpdateUser_Call) RunAndReturn(run func(id int32, params entities.UpdateUserParams) error) *MockUserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}
